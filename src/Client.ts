// This file was auto-generated by Fern from our API Definition.

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Workflows } from "./api/resources/workflows/client/Client.js";
import { Environments } from "./api/resources/environments/client/Client.js";
import { Revisions } from "./api/resources/revisions/client/Client.js";
import { Usage } from "./api/resources/usage/client/Client.js";
import { WorkflowLogs } from "./api/resources/workflowLogs/client/Client.js";
import { Copilots } from "./api/resources/copilots/client/Client.js";
import { Triggers } from "./api/resources/triggers/client/Client.js";
import { Integrations } from "./api/resources/integrations/client/Client.js";
import { Organizations } from "./api/resources/organizations/client/Client.js";
import { Collections } from "./api/resources/collections/client/Client.js";
import { Tables } from "./api/resources/tables/client/Client.js";
import { Documents } from "./api/resources/documents/client/Client.js";
import { Sources } from "./api/resources/sources/client/Client.js";
import { Syncs } from "./api/resources/syncs/client/Client.js";

export declare namespace ScoutClient {
    export interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class ScoutClient {
    protected readonly _options: ScoutClient.Options;
    protected _workflows: Workflows | undefined;
    protected _environments: Environments | undefined;
    protected _revisions: Revisions | undefined;
    protected _usage: Usage | undefined;
    protected _workflowLogs: WorkflowLogs | undefined;
    protected _copilots: Copilots | undefined;
    protected _triggers: Triggers | undefined;
    protected _integrations: Integrations | undefined;
    protected _organizations: Organizations | undefined;
    protected _collections: Collections | undefined;
    protected _tables: Tables | undefined;
    protected _documents: Documents | undefined;
    protected _sources: Sources | undefined;
    protected _syncs: Syncs | undefined;

    constructor(_options: ScoutClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "scoutos",
                    "X-Fern-SDK-Version": "0.10.8",
                    "User-Agent": "scoutos/0.10.8",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get workflows(): Workflows {
        return (this._workflows ??= new Workflows(this._options));
    }

    public get environments(): Environments {
        return (this._environments ??= new Environments(this._options));
    }

    public get revisions(): Revisions {
        return (this._revisions ??= new Revisions(this._options));
    }

    public get usage(): Usage {
        return (this._usage ??= new Usage(this._options));
    }

    public get workflowLogs(): WorkflowLogs {
        return (this._workflowLogs ??= new WorkflowLogs(this._options));
    }

    public get copilots(): Copilots {
        return (this._copilots ??= new Copilots(this._options));
    }

    public get triggers(): Triggers {
        return (this._triggers ??= new Triggers(this._options));
    }

    public get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this._options));
    }

    public get organizations(): Organizations {
        return (this._organizations ??= new Organizations(this._options));
    }

    public get collections(): Collections {
        return (this._collections ??= new Collections(this._options));
    }

    public get tables(): Tables {
        return (this._tables ??= new Tables(this._options));
    }

    public get documents(): Documents {
        return (this._documents ??= new Documents(this._options));
    }

    public get sources(): Sources {
        return (this._sources ??= new Sources(this._options));
    }

    public get syncs(): Syncs {
        return (this._syncs ??= new Syncs(this._options));
    }
}
