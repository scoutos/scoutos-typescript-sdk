// This file was auto-generated by Fern from our API Definition.

/**
 * @example
 *     {}
 */
export interface QueryBuilderRequest {
    /** Maximum results to return */
    limit?: number;
    /** Offset for pagination */
    offset?: number;
    /** Text to search in descriptions */
    text_query?: string;
    /** Start time for filtering */
    time_range_start?: string;
    /** End time for filtering */
    time_range_end?: string;
    /** Filter to last N hours */
    last_hours?: number;
    /** Filter to last N days */
    last_days?: number;
    /** Filter by agent types */
    agent_types?: string[];
    /** Filter by specific agent IDs */
    agent_ids?: string[];
    /** Filter by object types */
    object_types?: string[];
    /** Filter by specific object IDs */
    object_ids?: string[];
    /** Filter by action types */
    action_types?: string[];
    /** Filter by action statuses */
    action_statuses?: string[];
    /** Filter by specific action names */
    specific_actions?: string[];
    /** Tags to include */
    tags?: string[];
    /** Tags to exclude */
    exclude_tags?: string[];
    /** Whether to match any or all tags */
    tag_mode?: QueryBuilderRequest.TagMode;
    /** Minimum duration in minutes */
    min_duration_minutes?: number;
    /** Maximum duration in minutes */
    max_duration_minutes?: number;
    /** Filter by customer ID */
    customer_id?: string;
    /** Filter by team */
    team_name?: string;
    /** Filter by deal stages */
    deal_stages?: string[];
    /** Filter for revenue impact events */
    revenue_impact?: boolean;
    /** Filter for churn risk events */
    churn_risk?: boolean;
    /** Filter by escalation level */
    escalation_level?: string;
    /** Filter by trace ID */
    trace_id?: string;
    /** Filter by triggering event */
    triggered_by?: string;
    /** Sort field */
    sort_by?: QueryBuilderRequest.SortBy;
    /** Sort direction */
    sort_direction?: QueryBuilderRequest.SortDirection;
    /** Return only count, not full results */
    count_only?: boolean;
    /** Include query explanation */
    explain?: boolean;
    /** Return aggregated results */
    aggregate?: boolean;
    /** Group by fields for aggregation */
    group_by?: QueryBuilderRequest.GroupBy.Item[];
    /** Group by tag prefix (e.g., 'customer:') */
    group_by_tag_prefix?: string;
}

export namespace QueryBuilderRequest {
    /** Whether to match any or all tags */
    export const TagMode = {
        Any: "any",
        All: "all",
    } as const;
    export type TagMode = (typeof TagMode)[keyof typeof TagMode];
    /** Sort field */
    export const SortBy = {
        Time: "time",
        Duration: "duration",
        Relevance: "relevance",
    } as const;
    export type SortBy = (typeof SortBy)[keyof typeof SortBy];
    /** Sort direction */
    export const SortDirection = {
        Asc: "asc",
        Desc: "desc",
    } as const;
    export type SortDirection = (typeof SortDirection)[keyof typeof SortDirection];
    export type GroupBy = GroupBy.Item[];

    export namespace GroupBy {
        export const Item = {
            TimeHour: "time_hour",
            TimeDay: "time_day",
            TimeWeek: "time_week",
            AgentType: "agent_type",
            ActionType: "action_type",
            TagPrefix: "tag_prefix",
        } as const;
        export type Item = (typeof Item)[keyof typeof Item];
    }
}
