// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Scout from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Documents {
    export interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Documents {
    protected readonly _options: Documents.Options;

    constructor(_options: Documents.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Scout.DocumentsListRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.list("collection_id", "table_id", {
     *         limit: 1,
     *         cursor: "cursor",
     *         query: "query",
     *         offset: 1,
     *         sort_by: "sort_by"
     *     })
     */
    public list(
        collection_id: string,
        table_id: string,
        request: Scout.DocumentsListRequest = {},
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionGetDocumentsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(collection_id, table_id, request, requestOptions));
    }

    private async __list(
        collection_id: string,
        table_id: string,
        request: Scout.DocumentsListRequest = {},
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionGetDocumentsResponse>> {
        const { limit, cursor, query, offset, sort_by: sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (query != null) {
            _queryParams["query"] = query;
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (sortBy != null) {
            _queryParams["sort_by"] = sortBy;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionGetDocumentsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling GET /v2/collections/{collection_id}/tables/{table_id}/documents.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Scout.DocumentsCreateRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.create("collection_id", "table_id", {
     *         job_id: "job_id",
     *         sync_id: "sync_id",
     *         await_completion: true,
     *         mode: "mode",
     *         body: {
     *             "key": true
     *         }
     *     })
     */
    public create(
        collection_id: string,
        table_id: string,
        request: Scout.DocumentsCreateRequest,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.DocumentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(collection_id, table_id, request, requestOptions));
    }

    private async __create(
        collection_id: string,
        table_id: string,
        request: Scout.DocumentsCreateRequest,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.DocumentResponse>> {
        const { job_id: jobId, sync_id: syncId, await_completion: awaitCompletion, mode, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (jobId != null) {
            _queryParams["job_id"] = jobId;
        }

        if (syncId != null) {
            _queryParams["sync_id"] = syncId;
        }

        if (awaitCompletion != null) {
            _queryParams["await_completion"] = awaitCompletion.toString();
        }

        if (mode != null) {
            _queryParams["mode"] = mode;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.DocumentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling POST /v2/collections/{collection_id}/tables/{table_id}/documents.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {Scout.DocumentsUpdateBatchRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.updateBatch("collection_id", "table_id", {
     *         job_id: "job_id",
     *         sync_id: "sync_id",
     *         await_completion: true,
     *         mode: "mode",
     *         body: {
     *             "key": true
     *         }
     *     })
     */
    public updateBatch(
        collection_id: string,
        table_id: string,
        request: Scout.DocumentsUpdateBatchRequest,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.DocumentResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__updateBatch(collection_id, table_id, request, requestOptions),
        );
    }

    private async __updateBatch(
        collection_id: string,
        table_id: string,
        request: Scout.DocumentsUpdateBatchRequest,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.DocumentResponse>> {
        const { job_id: jobId, sync_id: syncId, await_completion: awaitCompletion, mode, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (jobId != null) {
            _queryParams["job_id"] = jobId;
        }

        if (syncId != null) {
            _queryParams["sync_id"] = syncId;
        }

        if (awaitCompletion != null) {
            _queryParams["await_completion"] = awaitCompletion.toString();
        }

        if (mode != null) {
            _queryParams["mode"] = mode;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents/update`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.DocumentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling POST /v2/collections/{collection_id}/tables/{table_id}/documents/update.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string} document_id
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.get("collection_id", "table_id", "document_id")
     */
    public get(
        collection_id: string,
        table_id: string,
        document_id: string,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionGetDocumentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(collection_id, table_id, document_id, requestOptions));
    }

    private async __get(
        collection_id: string,
        table_id: string,
        document_id: string,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionGetDocumentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents/${encodeURIComponent(document_id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionGetDocumentResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling GET /v2/collections/{collection_id}/tables/{table_id}/documents/{document_id}.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string} document_id
     * @param {unknown} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.update("collection_id", "table_id", "document_id", {
     *         "key": "value"
     *     })
     */
    public update(
        collection_id: string,
        table_id: string,
        document_id: string,
        request?: unknown,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionUpdateDocumentResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__update(collection_id, table_id, document_id, request, requestOptions),
        );
    }

    private async __update(
        collection_id: string,
        table_id: string,
        document_id: string,
        request?: unknown,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionUpdateDocumentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents/${encodeURIComponent(document_id)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionUpdateDocumentResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling PUT /v2/collections/{collection_id}/tables/{table_id}/documents/{document_id}.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string} document_id
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.delete("collection_id", "table_id", "document_id")
     */
    public delete(
        collection_id: string,
        table_id: string,
        document_id: string,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionDeleteDocumentsResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__delete(collection_id, table_id, document_id, requestOptions),
        );
    }

    private async __delete(
        collection_id: string,
        table_id: string,
        document_id: string,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionDeleteDocumentsResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents/${encodeURIComponent(document_id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionDeleteDocumentsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling DELETE /v2/collections/{collection_id}/tables/{table_id}/documents/{document_id}.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete documents given a list of document ids.
     *
     * @param {string} collection_id
     * @param {string} table_id
     * @param {string[]} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.documents.deleteBatch("collection_id", "table_id", ["string"])
     */
    public deleteBatch(
        collection_id: string,
        table_id: string,
        request: string[],
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionDeleteDocumentsResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__deleteBatch(collection_id, table_id, request, requestOptions),
        );
    }

    private async __deleteBatch(
        collection_id: string,
        table_id: string,
        request: string[],
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionDeleteDocumentsResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/collections/${encodeURIComponent(collection_id)}/tables/${encodeURIComponent(table_id)}/documents/delete`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionDeleteDocumentsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling POST /v2/collections/{collection_id}/tables/{table_id}/documents/delete.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SCOUT_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
