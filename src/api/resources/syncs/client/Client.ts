// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Scout from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Syncs {
    export interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Syncs {
    protected readonly _options: Syncs.Options;

    constructor(_options: Syncs.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {Syncs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.syncs.list()
     */
    public list(
        requestOptions?: Syncs.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionGetSyncsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: Syncs.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionGetSyncsResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/syncs",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionGetSyncsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScoutError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling GET /v2/syncs.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Scout.RequestBody} request
     * @param {Syncs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.syncs.create({
     *         sync_config: {
     *             source_settings: {
     *                 source_archetype_id: "com.google.drive"
     *             },
     *             destination: {
     *                 destination_type: "collections.v2",
     *                 collection_id: "collection_id",
     *                 table_id: "table_id"
     *             },
     *             mapping: {}
     *         }
     *     })
     */
    public create(
        request: Scout.RequestBody,
        requestOptions?: Syncs.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionCreateSyncResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Scout.RequestBody,
        requestOptions?: Syncs.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionCreateSyncResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/syncs",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionCreateSyncResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling POST /v2/syncs.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} sync_id
     * @param {Syncs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.syncs.get("sync_id")
     */
    public get(
        sync_id: string,
        requestOptions?: Syncs.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionGetSyncResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(sync_id, requestOptions));
    }

    private async __get(
        sync_id: string,
        requestOptions?: Syncs.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionGetSyncResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/syncs/${encodeURIComponent(sync_id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionGetSyncResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling GET /v2/syncs/{sync_id}.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} sync_id
     * @param {Scout.RequestBody} request
     * @param {Syncs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.syncs.update("sync_id", {
     *         sync_config: {
     *             source_settings: {
     *                 source_archetype_id: "com.google.drive"
     *             },
     *             destination: {
     *                 destination_type: "collections.v2",
     *                 collection_id: "collection_id",
     *                 table_id: "table_id"
     *             },
     *             mapping: {}
     *         }
     *     })
     */
    public update(
        sync_id: string,
        request: Scout.RequestBody,
        requestOptions?: Syncs.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionUpdateSyncResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(sync_id, request, requestOptions));
    }

    private async __update(
        sync_id: string,
        request: Scout.RequestBody,
        requestOptions?: Syncs.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionUpdateSyncResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/syncs/${encodeURIComponent(sync_id)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionUpdateSyncResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling PUT /v2/syncs/{sync_id}.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} sync_id
     * @param {Syncs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.syncs.delete("sync_id")
     */
    public delete(
        sync_id: string,
        requestOptions?: Syncs.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesCollectionDeleteSyncResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(sync_id, requestOptions));
    }

    private async __delete(
        sync_id: string,
        requestOptions?: Syncs.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesCollectionDeleteSyncResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/syncs/${encodeURIComponent(sync_id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesCollectionDeleteSyncResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling DELETE /v2/syncs/{sync_id}.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} sync_id
     * @param {Syncs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.syncs.execute("sync_id")
     */
    public execute(sync_id: string, requestOptions?: Syncs.RequestOptions): core.HttpResponsePromise<unknown> {
        return core.HttpResponsePromise.fromPromise(this.__execute(sync_id, requestOptions));
    }

    private async __execute(
        sync_id: string,
        requestOptions?: Syncs.RequestOptions,
    ): Promise<core.WithRawResponse<unknown>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/syncs/${encodeURIComponent(sync_id)}/execute`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling POST /v2/syncs/{sync_id}/execute.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SCOUT_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
