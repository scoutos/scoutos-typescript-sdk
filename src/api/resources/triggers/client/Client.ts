// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Scout from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Triggers {
    export interface Options {
        environment?: core.Supplier<environments.ScoutEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Triggers {
    protected readonly _options: Triggers.Options;

    constructor(_options: Triggers.Options = {}) {
        this._options = _options;
    }

    /**
     * All apis and effects are injected into every endpoint
     * via request.context. The request_context() utility can be used
     * to get Intellisense type-completion
     *
     * @param {Scout.TriggersListRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.triggers.list({
     *         action_type: "workflow.execute",
     *         workflow_id: "workflow_id"
     *     })
     */
    public list(
        request: Scout.TriggersListRequest = {},
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.ListTriggersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Scout.TriggersListRequest = {},
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.ListTriggersResponse>> {
        const { action_type: actionType, workflow_id: workflowId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (actionType != null) {
            _queryParams["action_type"] = actionType;
        }

        if (workflowId != null) {
            _queryParams["workflow_id"] = workflowId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/triggers",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.ListTriggersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling GET /v2/triggers.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Scout.TriggersCreateRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.triggers.create({
     *         action: {
     *             action_type: "source.sync",
     *             sync_id: "sync_id"
     *         }
     *     })
     */
    public create(
        request: Scout.TriggersCreateRequest,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.SrcAppHttpRoutesTriggerCreateTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Scout.TriggersCreateRequest,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.SrcAppHttpRoutesTriggerCreateTriggerResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/triggers",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Scout.SrcAppHttpRoutesTriggerCreateTriggerResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling POST /v2/triggers.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} trigger_id
     * @param {Scout.TriggersUpdateRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.triggers.update("trigger_id", {
     *         action: {
     *             action_type: "source.sync",
     *             sync_id: "sync_id"
     *         }
     *     })
     */
    public update(
        trigger_id: string,
        request: Scout.TriggersUpdateRequest,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.UpdateTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(trigger_id, request, requestOptions));
    }

    private async __update(
        trigger_id: string,
        request: Scout.TriggersUpdateRequest,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.UpdateTriggerResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/triggers/${encodeURIComponent(trigger_id)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.UpdateTriggerResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling PUT /v2/triggers/{trigger_id}.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} trigger_id
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.triggers.delete("trigger_id")
     */
    public delete(
        trigger_id: string,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.DeleteTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(trigger_id, requestOptions));
    }

    private async __delete(
        trigger_id: string,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.DeleteTriggerResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                `v2/triggers/${encodeURIComponent(trigger_id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.DeleteTriggerResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling DELETE /v2/triggers/{trigger_id}.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.executeSlack()
     */
    public executeSlack(
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.TriggersExecuteSlackResponse> {
        return core.HttpResponsePromise.fromPromise(this.__executeSlack(requestOptions));
    }

    private async __executeSlack(
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.TriggersExecuteSlackResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/triggers/slack/execute",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.TriggersExecuteSlackResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScoutError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling POST /v2/triggers/slack/execute.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.executeCron()
     */
    public executeCron(
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.ExecuteTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__executeCron(requestOptions));
    }

    private async __executeCron(
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.ExecuteTriggerResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/triggers/cron/execute",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.ExecuteTriggerResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScoutError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError("Timeout exceeded when calling POST /v2/triggers/cron/execute.");
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update Cloud Scheduler job Authorization headers for organizations.
     * Lists all Cloud Scheduler jobs and updates those matching the trigger pattern.
     *
     * Args:
     *     dry_run: If True, only shows what would be updated without making changes
     *     test_org_id: If provided, only processes jobs for this specific organization ID
     *
     * Only accessible to Scout internal organizations for security.
     *
     * @param {Scout.TriggersUpdateCronAuthHeadersRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Scout.UnprocessableEntityError}
     *
     * @example
     *     await client.triggers.updateCronAuthHeaders({
     *         dry_run: true,
     *         test_org_id: "test_org_id"
     *     })
     */
    public updateCronAuthHeaders(
        request: Scout.TriggersUpdateCronAuthHeadersRequest = {},
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Scout.UpdateCronAuthResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateCronAuthHeaders(request, requestOptions));
    }

    private async __updateCronAuthHeaders(
        request: Scout.TriggersUpdateCronAuthHeadersRequest = {},
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Scout.UpdateCronAuthResponse>> {
        const { dry_run: dryRun, test_org_id: testOrgId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (dryRun != null) {
            _queryParams["dry_run"] = dryRun.toString();
        }

        if (testOrgId != null) {
            _queryParams["test_org_id"] = testOrgId;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ScoutEnvironment.Prod,
                "v2/triggers/cron/update-auth-headers",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Scout.UpdateCronAuthResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Scout.UnprocessableEntityError(
                        _response.error.body as Scout.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ScoutError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScoutError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ScoutTimeoutError(
                    "Timeout exceeded when calling POST /v2/triggers/cron/update-auth-headers.",
                );
            case "unknown":
                throw new errors.ScoutError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SCOUT_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
