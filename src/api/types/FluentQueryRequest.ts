// This file was auto-generated by Fern from our API Definition.

/**
 * Fluent query request - powerful, declarative querying.
 *
 * Example:
 *     {
 *         "select": "deal",
 *         "where": [
 *             {"field": "stage", "operator": "in", "value": ["negotiation", "proposal"]},
 *             {"field": "value", "operator": ">=", "value": 50000}
 *         ],
 *         "with": ["account", "contact"],
 *         "orderBy": [{"field": "value", "direction": "desc"}],
 *         "limit": 50
 *     }
 */
export interface FluentQueryRequest {
    /** Entity type to select */
    select: string;
    /** WHERE conditions: [{field, operator, value}, ...] */
    where?: Record<string, unknown>[];
    /** Relations to include (auto-JOIN) */
    with?: FluentQueryRequest.With.Item[];
    /** Order by: [{field, direction}, ...] */
    orderBy?: Record<string, string>[];
    /** Max results */
    limit?: number;
    /** Offset for pagination */
    offset?: number;
    /** Cursor for pagination */
    cursor?: string;
    /** Include total count */
    count?: boolean;
    /** Group by field */
    groupBy?: string;
    /** Aggregations: {alias: {function, field}} */
    aggregations?: Record<string, Record<string, string>>;
}

export namespace FluentQueryRequest {
    export type With = With.Item[];

    export namespace With {
        export type Item = string | Record<string, unknown>;
    }
}
