/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../index";
import * as Scout from "../../../api/index";
import * as core from "../../../core";

export const EntityQueryRequest: core.serialization.Schema<
    serializers.EntityQueryRequest.Raw,
    Scout.EntityQueryRequest
> = core.serialization.object({
    entity_type: core.serialization.string().optional(),
    activity_filters: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    tags: core.serialization.list(core.serialization.string()).optional(),
    outcomes: core.serialization.list(core.serialization.string()).optional(),
    actions: core.serialization.list(core.serialization.string()).optional(),
    time: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    kinds: core.serialization.list(core.serialization.string()).optional(),
    roles: core.serialization.list(core.serialization.string()).optional(),
    current_state: core.serialization.boolean().optional(),
    include_stats: core.serialization.boolean().optional(),
    group_by: core.serialization.string().optional(),
    limit: core.serialization.number().optional(),
    min_activities: core.serialization.number().optional(),
});

export declare namespace EntityQueryRequest {
    export interface Raw {
        entity_type?: string | null;
        activity_filters?: Record<string, unknown> | null;
        tags?: string[] | null;
        outcomes?: string[] | null;
        actions?: string[] | null;
        time?: Record<string, unknown> | null;
        kinds?: string[] | null;
        roles?: string[] | null;
        current_state?: boolean | null;
        include_stats?: boolean | null;
        group_by?: string | null;
        limit?: number | null;
        min_activities?: number | null;
    }
}
