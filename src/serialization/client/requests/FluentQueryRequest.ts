/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../index";
import * as Scout from "../../../api/index";
import * as core from "../../../core";
import { FluentQueryRequestWithItem } from "../../types/FluentQueryRequestWithItem";

export const FluentQueryRequest: core.serialization.Schema<
    serializers.FluentQueryRequest.Raw,
    Scout.FluentQueryRequest
> = core.serialization.object({
    select: core.serialization.string(),
    where: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.unknown()))
        .optional(),
    with: core.serialization.list(FluentQueryRequestWithItem).optional(),
    orderBy: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.string()))
        .optional(),
    limit: core.serialization.number().optional(),
    offset: core.serialization.number().optional(),
    cursor: core.serialization.string().optional(),
    count: core.serialization.boolean().optional(),
    groupBy: core.serialization.string().optional(),
    aggregations: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.record(core.serialization.string(), core.serialization.string()),
        )
        .optional(),
});

export declare namespace FluentQueryRequest {
    export interface Raw {
        select: string;
        where?: Record<string, unknown>[] | null;
        with?: FluentQueryRequestWithItem.Raw[] | null;
        orderBy?: Record<string, string>[] | null;
        limit?: number | null;
        offset?: number | null;
        cursor?: string | null;
        count?: boolean | null;
        groupBy?: string | null;
        aggregations?: Record<string, Record<string, string>> | null;
    }
}
