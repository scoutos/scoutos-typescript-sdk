/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Scout from "../../../../../api/index";
import * as core from "../../../../../core";
import { UpdateViewRequestType } from "../../types/UpdateViewRequestType";
import { UpdateViewRequestSettings } from "../../types/UpdateViewRequestSettings";
import { ViewVisibility } from "../../../../types/ViewVisibility";
import { ViewFilter } from "../../../../types/ViewFilter";
import { ViewQueryInput } from "../../../../types/ViewQueryInput";

export const UpdateViewRequest: core.serialization.Schema<serializers.UpdateViewRequest.Raw, Scout.UpdateViewRequest> =
    core.serialization.object({
        name: core.serialization.string().optional(),
        type: UpdateViewRequestType.optional(),
        emoji: core.serialization.string().optional(),
        settings: UpdateViewRequestSettings.optional(),
        visibility: ViewVisibility.optional(),
        shared_with: core.serialization.list(core.serialization.string()).optional(),
        filters: core.serialization.list(ViewFilter).optional(),
        query: ViewQueryInput.optional(),
    });

export declare namespace UpdateViewRequest {
    export interface Raw {
        name?: string | null;
        type?: UpdateViewRequestType.Raw | null;
        emoji?: string | null;
        settings?: UpdateViewRequestSettings.Raw | null;
        visibility?: ViewVisibility.Raw | null;
        shared_with?: string[] | null;
        filters?: ViewFilter.Raw[] | null;
        query?: ViewQueryInput.Raw | null;
    }
}
