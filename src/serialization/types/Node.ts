/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Scout from "../../api/index";
import * as core from "../../core";
import { NodeTypes } from "./NodeTypes";
import { NodeInputsValue } from "./NodeInputsValue";
import { NodeOutput } from "./NodeOutput";
import { RunsWhenItem } from "./RunsWhenItem";

export const Node: core.serialization.ObjectSchema<serializers.Node.Raw, Scout.Node> = core.serialization.object({
    name: core.serialization.string(),
    type: NodeTypes,
    title: core.serialization.string().optional(),
    startMessage: core.serialization.property("start_message", core.serialization.string().optional()),
    inputs: core.serialization.record(core.serialization.string(), NodeInputsValue.optional()),
    output: NodeOutput.optional(),
    depends: core.serialization.list(core.serialization.string()).optional(),
    runWhen: core.serialization.property("run_when", core.serialization.list(RunsWhenItem).optional()),
});

export declare namespace Node {
    interface Raw {
        name: string;
        type: NodeTypes.Raw;
        title?: string | null;
        start_message?: string | null;
        inputs: Record<string, NodeInputsValue.Raw | null | undefined>;
        output?: NodeOutput.Raw | null;
        depends?: string[] | null;
        run_when?: RunsWhenItem.Raw[] | null;
    }
}
