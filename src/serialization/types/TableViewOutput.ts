/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Scout from "../../api/index";
import * as core from "../../core";
import { ViewVisibility } from "./ViewVisibility";
import { ViewFilter } from "./ViewFilter";
import { ViewQueryOutput } from "./ViewQueryOutput";
import { TableViewSettingsOutput } from "./TableViewSettingsOutput";

export const TableViewOutput: core.serialization.ObjectSchema<serializers.TableViewOutput.Raw, Scout.TableViewOutput> =
    core.serialization.object({
        id: core.serialization.string(),
        name: core.serialization.string(),
        emoji: core.serialization.string().optional(),
        table_id: core.serialization.string().optional(),
        collection_id: core.serialization.string(),
        created_at: core.serialization.date().optional(),
        updated_at: core.serialization.date().optional(),
        created_by: core.serialization.string().optional(),
        last_updated_by: core.serialization.string().optional(),
        visibility: ViewVisibility.optional(),
        shared_with: core.serialization.list(core.serialization.string()).optional(),
        filters: core.serialization.list(ViewFilter).optional(),
        query: ViewQueryOutput.optional(),
        type: core.serialization.stringLiteral("table"),
        settings: TableViewSettingsOutput,
    });

export declare namespace TableViewOutput {
    export interface Raw {
        id: string;
        name: string;
        emoji?: string | null;
        table_id?: string | null;
        collection_id: string;
        created_at?: string | null;
        updated_at?: string | null;
        created_by?: string | null;
        last_updated_by?: string | null;
        visibility?: ViewVisibility.Raw | null;
        shared_with?: string[] | null;
        filters?: ViewFilter.Raw[] | null;
        query?: ViewQueryOutput.Raw | null;
        type: "table";
        settings: TableViewSettingsOutput.Raw;
    }
}
