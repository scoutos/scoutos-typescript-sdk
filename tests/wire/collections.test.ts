/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Collections", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    collection_config: { collection_img_url: undefined, collection_description: undefined },
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: { type: "user", details: undefined },
                    last_updated_by: { type: "user", details: undefined },
                    collection_id: "collection_id",
                    revision_id: "revision_id",
                },
            ],
            has_more: true,
            next_cursor: "next_cursor",
        };
        server.mockEndpoint().get("/v2/collections").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.collections.list({
            start_at: "start_at",
            limit: 1,
            query: "query",
            tags: "tags",
            sort: "sort",
            drive: true,
        });
        expect(response).toEqual({
            data: [
                {
                    collection_config: {
                        collection_img_url: undefined,
                        collection_description: undefined,
                    },
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: undefined,
                    },
                    last_updated_by: {
                        type: "user",
                        details: undefined,
                    },
                    collection_id: "collection_id",
                    revision_id: "revision_id",
                },
            ],
            has_more: true,
            next_cursor: "next_cursor",
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v2/collections").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.collections.list();
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                collection_config: {
                    collection_display_name: "collection_display_name",
                    collection_img_url: "collection_img_url",
                    collection_description: "collection_description",
                    tags: ["tags"],
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                collection_id: "collection_id",
                revision_id: "revision_id",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.create({});
        expect(response).toEqual({
            data: {
                collection_config: {
                    collection_display_name: "collection_display_name",
                    collection_img_url: "collection_img_url",
                    collection_description: "collection_description",
                    tags: ["tags"],
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                collection_id: "collection_id",
                revision_id: "revision_id",
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            collection_display_name: undefined,
            collection_img_url: undefined,
            collection_description: undefined,
            tags: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.create({
                collection_display_name: undefined,
                collection_img_url: undefined,
                collection_description: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                collection_config: {
                    collection_display_name: "collection_display_name",
                    collection_img_url: "collection_img_url",
                    collection_description: "collection_description",
                    tags: ["tags"],
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                collection_id: "collection_id",
                revision_id: "revision_id",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.get("collection_id");
        expect(response).toEqual({
            data: {
                collection_config: {
                    collection_display_name: "collection_display_name",
                    collection_img_url: "collection_img_url",
                    collection_description: "collection_description",
                    tags: ["tags"],
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                collection_id: "collection_id",
                revision_id: "revision_id",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.get("collection_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                collection_config: {
                    collection_display_name: "collection_display_name",
                    collection_img_url: "collection_img_url",
                    collection_description: "collection_description",
                    tags: ["tags"],
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                collection_id: "collection_id",
                revision_id: "revision_id",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.update("collection_id", {});
        expect(response).toEqual({
            data: {
                collection_config: {
                    collection_display_name: "collection_display_name",
                    collection_img_url: "collection_img_url",
                    collection_description: "collection_description",
                    tags: ["tags"],
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                collection_id: "collection_id",
                revision_id: "revision_id",
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            collection_display_name: undefined,
            collection_img_url: undefined,
            collection_description: undefined,
            tags: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.update("collection_id", {
                collection_display_name: undefined,
                collection_img_url: undefined,
                collection_description: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.delete("collection_id");
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.delete("collection_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get_views (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            data: {
                views: {
                    key: {
                        id: "id",
                        name: "name",
                        emoji: undefined,
                        table_id: undefined,
                        collection_id: "collection_id",
                        created_at: undefined,
                        updated_at: undefined,
                        created_by: undefined,
                        last_updated_by: undefined,
                        type: "kanban",
                        settings: { grouping_column: "grouping_column", card_image_field: undefined },
                    },
                },
                view_ids: ["view_ids"],
                active_view_id: "active_view_id",
                active_table_id: "active_table_id",
                display_settings: { key: "value" },
                last_synced_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
            error: "error",
        };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/views")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.getViews("collection_id");
        expect(response).toEqual({
            success: true,
            data: {
                views: {
                    key: {
                        id: "id",
                        name: "name",
                        emoji: undefined,
                        table_id: undefined,
                        collection_id: "collection_id",
                        created_at: undefined,
                        updated_at: undefined,
                        created_by: undefined,
                        last_updated_by: undefined,
                        type: "kanban",
                        settings: {
                            grouping_column: "grouping_column",
                            card_image_field: undefined,
                        },
                    },
                },
                view_ids: ["view_ids"],
                active_view_id: "active_view_id",
                active_table_id: "active_table_id",
                display_settings: {
                    key: "value",
                },
                last_synced_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
            error: "error",
        });
    });

    test("get_views (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/views")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.getViews("collection_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update_views (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { view_state: { organization_id: "organization_id", collection_id: "collection_id" } };
        const rawResponseBody = {
            success: true,
            data: {
                views: {
                    key: {
                        id: "id",
                        name: "name",
                        emoji: undefined,
                        table_id: undefined,
                        collection_id: "collection_id",
                        created_at: undefined,
                        updated_at: undefined,
                        created_by: undefined,
                        last_updated_by: undefined,
                        type: "kanban",
                        settings: { grouping_column: "grouping_column", card_image_field: undefined },
                    },
                },
                view_ids: ["view_ids"],
                active_view_id: "active_view_id",
                active_table_id: "active_table_id",
                display_settings: { key: "value" },
                last_synced_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
            error: "error",
        };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id/views")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.updateViews("collection_id", {
            view_state: {
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
        });
        expect(response).toEqual({
            success: true,
            data: {
                views: {
                    key: {
                        id: "id",
                        name: "name",
                        emoji: undefined,
                        table_id: undefined,
                        collection_id: "collection_id",
                        created_at: undefined,
                        updated_at: undefined,
                        created_by: undefined,
                        last_updated_by: undefined,
                        type: "kanban",
                        settings: {
                            grouping_column: "grouping_column",
                            card_image_field: undefined,
                        },
                    },
                },
                view_ids: ["view_ids"],
                active_view_id: "active_view_id",
                active_table_id: "active_table_id",
                display_settings: {
                    key: "value",
                },
                last_synced_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
            error: "error",
        });
    });

    test("update_views (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            view_state: {
                views: undefined,
                view_ids: undefined,
                active_view_id: undefined,
                active_table_id: undefined,
                display_settings: undefined,
                last_synced_at: undefined,
                created_at: undefined,
                updated_at: undefined,
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id/views")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.updateViews("collection_id", {
                view_state: {
                    views: undefined,
                    view_ids: undefined,
                    active_view_id: undefined,
                    active_table_id: undefined,
                    display_settings: undefined,
                    last_synced_at: undefined,
                    created_at: undefined,
                    updated_at: undefined,
                    organization_id: "organization_id",
                    collection_id: "collection_id",
                },
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete_views (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            data: {
                views: {
                    key: {
                        id: "id",
                        name: "name",
                        emoji: undefined,
                        table_id: undefined,
                        collection_id: "collection_id",
                        created_at: undefined,
                        updated_at: undefined,
                        created_by: undefined,
                        last_updated_by: undefined,
                        type: "kanban",
                        settings: { grouping_column: "grouping_column", card_image_field: undefined },
                    },
                },
                view_ids: ["view_ids"],
                active_view_id: "active_view_id",
                active_table_id: "active_table_id",
                display_settings: { key: "value" },
                last_synced_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
            error: "error",
        };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id/views")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.deleteViews("collection_id");
        expect(response).toEqual({
            success: true,
            data: {
                views: {
                    key: {
                        id: "id",
                        name: "name",
                        emoji: undefined,
                        table_id: undefined,
                        collection_id: "collection_id",
                        created_at: undefined,
                        updated_at: undefined,
                        created_by: undefined,
                        last_updated_by: undefined,
                        type: "kanban",
                        settings: {
                            grouping_column: "grouping_column",
                            card_image_field: undefined,
                        },
                    },
                },
                view_ids: ["view_ids"],
                active_view_id: "active_view_id",
                active_table_id: "active_table_id",
                display_settings: {
                    key: "value",
                },
                last_synced_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                organization_id: "organization_id",
                collection_id: "collection_id",
            },
            error: "error",
        });
    });

    test("delete_views (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id/views")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.deleteViews("collection_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("list_individual_views (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            data: [
                {
                    id: "id",
                    name: "name",
                    emoji: "emoji",
                    table_id: "table_id",
                    collection_id: "collection_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    last_updated_by: "last_updated_by",
                    visibility: "personal",
                    shared_with: ["shared_with"],
                    query: { global_search: undefined, limit: undefined, offset: undefined },
                    type: "kanban",
                    settings: { grouping_column: "grouping_column", card_image_field: undefined },
                },
            ],
            error: "error",
        };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/views/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.listIndividualViews("collection_id");
        expect(response).toEqual({
            success: true,
            data: [
                {
                    id: "id",
                    name: "name",
                    emoji: "emoji",
                    table_id: "table_id",
                    collection_id: "collection_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    created_by: "created_by",
                    last_updated_by: "last_updated_by",
                    visibility: "personal",
                    shared_with: ["shared_with"],
                    query: {
                        global_search: undefined,
                        limit: undefined,
                        offset: undefined,
                    },
                    type: "kanban",
                    settings: {
                        grouping_column: "grouping_column",
                        card_image_field: undefined,
                    },
                },
            ],
            error: "error",
        });
    });

    test("list_individual_views (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/views/list")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.listIndividualViews("collection_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("create_view (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            success: true,
            data: {
                id: "id",
                name: "name",
                emoji: "emoji",
                table_id: "table_id",
                collection_id: "collection_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_by: "created_by",
                last_updated_by: "last_updated_by",
                visibility: "personal",
                shared_with: ["shared_with"],
                query: {
                    global_search: "global_search",
                    sort_by: [{ column_id: "column_id", direction: "asc" }],
                    limit: 1,
                    offset: 1,
                },
                type: "kanban",
                settings: {
                    column_visibility: { key: true },
                    column_order: ["column_order"],
                    column_widths: { key: 1 },
                    type: "kanban",
                    grouping_column: "grouping_column",
                    group_visibility: { key: true },
                    group_order: ["group_order"],
                    card_display_fields: [{ column_id: "column_id", type: undefined }],
                    card_compact_mode: true,
                    card_image_field: "card_image_field",
                },
            },
            error: "error",
        };
        server
            .mockEndpoint()
            .post("/v2/collections/collection_id/views/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.createView("collection_id", {
            name: "name",
        });
        expect(response).toEqual({
            success: true,
            data: {
                id: "id",
                name: "name",
                emoji: "emoji",
                table_id: "table_id",
                collection_id: "collection_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_by: "created_by",
                last_updated_by: "last_updated_by",
                visibility: "personal",
                shared_with: ["shared_with"],
                query: {
                    global_search: "global_search",
                    sort_by: [
                        {
                            column_id: "column_id",
                            direction: "asc",
                        },
                    ],
                    limit: 1,
                    offset: 1,
                },
                type: "kanban",
                settings: {
                    column_visibility: {
                        key: true,
                    },
                    column_order: ["column_order"],
                    column_widths: {
                        key: 1,
                    },
                    type: "kanban",
                    grouping_column: "grouping_column",
                    group_visibility: {
                        key: true,
                    },
                    group_order: ["group_order"],
                    card_display_fields: [
                        {
                            column_id: "column_id",
                            type: undefined,
                        },
                    ],
                    card_compact_mode: true,
                    card_image_field: "card_image_field",
                },
            },
            error: "error",
        });
    });

    test("create_view (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            type: undefined,
            emoji: undefined,
            table_id: undefined,
            settings: undefined,
            visibility: undefined,
            shared_with: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/collections/collection_id/views/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.createView("collection_id", {
                name: "name",
                type: undefined,
                emoji: undefined,
                table_id: undefined,
                settings: undefined,
                visibility: undefined,
                shared_with: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update_view (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            success: true,
            data: {
                id: "id",
                name: "name",
                emoji: "emoji",
                table_id: "table_id",
                collection_id: "collection_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_by: "created_by",
                last_updated_by: "last_updated_by",
                visibility: "personal",
                shared_with: ["shared_with"],
                query: {
                    global_search: "global_search",
                    sort_by: [{ column_id: "column_id", direction: "asc" }],
                    limit: 1,
                    offset: 1,
                },
                type: "kanban",
                settings: {
                    column_visibility: { key: true },
                    column_order: ["column_order"],
                    column_widths: { key: 1 },
                    type: "kanban",
                    grouping_column: "grouping_column",
                    group_visibility: { key: true },
                    group_order: ["group_order"],
                    card_display_fields: [{ column_id: "column_id", type: undefined }],
                    card_compact_mode: true,
                    card_image_field: "card_image_field",
                },
            },
            error: "error",
        };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id/views/view_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.updateView("collection_id", "view_id");
        expect(response).toEqual({
            success: true,
            data: {
                id: "id",
                name: "name",
                emoji: "emoji",
                table_id: "table_id",
                collection_id: "collection_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                created_by: "created_by",
                last_updated_by: "last_updated_by",
                visibility: "personal",
                shared_with: ["shared_with"],
                query: {
                    global_search: "global_search",
                    sort_by: [
                        {
                            column_id: "column_id",
                            direction: "asc",
                        },
                    ],
                    limit: 1,
                    offset: 1,
                },
                type: "kanban",
                settings: {
                    column_visibility: {
                        key: true,
                    },
                    column_order: ["column_order"],
                    column_widths: {
                        key: 1,
                    },
                    type: "kanban",
                    grouping_column: "grouping_column",
                    group_visibility: {
                        key: true,
                    },
                    group_order: ["group_order"],
                    card_display_fields: [
                        {
                            column_id: "column_id",
                            type: undefined,
                        },
                    ],
                    card_compact_mode: true,
                    card_image_field: "card_image_field",
                },
            },
            error: "error",
        });
    });

    test("update_view (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            type: undefined,
            emoji: undefined,
            settings: undefined,
            visibility: undefined,
            shared_with: undefined,
            filters: undefined,
            query: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id/views/view_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.updateView("collection_id", "view_id", {
                name: undefined,
                type: undefined,
                emoji: undefined,
                settings: undefined,
                visibility: undefined,
                shared_with: undefined,
                filters: undefined,
                query: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete_view (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, error: "error" };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id/views/view_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.deleteView("collection_id", "view_id");
        expect(response).toEqual({
            success: true,
            error: "error",
        });
    });

    test("delete_view (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id/views/view_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.deleteView("collection_id", "view_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
