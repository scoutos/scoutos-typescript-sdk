// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Copilots", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    copilot_config: {
                        workflow_id: undefined,
                        img_url: undefined,
                        display_name: undefined,
                        loading_text: undefined,
                        message_placeholder: undefined,
                        allowed_origins: undefined,
                    },
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: { key: "value" },
                        },
                    },
                    last_updated_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: { key: "value" },
                        },
                    },
                    revision_id: "revision_id",
                    copilot_id: "copilot_id",
                    is_draft: true,
                },
            ],
            next_cursor: "2024-01-15T09:30:00Z",
            has_more: true,
        };
        server.mockEndpoint().get("/v2/copilots").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.copilots.list({
            sort: "sort",
            direction: "direction",
            start_at: "start_at",
            limit: 1,
            query: "query",
        });
        expect(response).toEqual({
            data: [
                {
                    copilot_config: {
                        workflow_id: undefined,
                        img_url: undefined,
                        display_name: undefined,
                        loading_text: undefined,
                        message_placeholder: undefined,
                        allowed_origins: undefined,
                    },
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: {
                                key: "value",
                            },
                        },
                    },
                    last_updated_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: {
                                key: "value",
                            },
                        },
                    },
                    revision_id: "revision_id",
                    copilot_id: "copilot_id",
                    is_draft: true,
                },
            ],
            next_cursor: "2024-01-15T09:30:00Z",
            has_more: true,
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v2/copilots").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.copilots.list();
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                copilot_config: {
                    workflow_id: "workflow_id",
                    img_url: "img_url",
                    display_name: "display_name",
                    mode: "light",
                    code_theme: "light",
                    colors: { key: "value" },
                    loading_text: "loading_text",
                    message_placeholder: "message_placeholder",
                    allowed_origins: "allowed_origins",
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                copilot_id: "copilot_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .post("/v2/copilots")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.create({});
        expect(response).toEqual({
            data: {
                copilot_config: {
                    workflow_id: "workflow_id",
                    img_url: "img_url",
                    display_name: "display_name",
                    mode: "light",
                    code_theme: "light",
                    colors: {
                        key: "value",
                    },
                    loading_text: "loading_text",
                    message_placeholder: "message_placeholder",
                    allowed_origins: "allowed_origins",
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                copilot_id: "copilot_id",
                is_draft: true,
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflow_id: undefined,
            img_url: undefined,
            display_name: undefined,
            mode: undefined,
            code_theme: undefined,
            colors: undefined,
            fab: undefined,
            loading_text: undefined,
            message_placeholder: undefined,
            initial_activity: undefined,
            allowed_origins: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/copilots")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.copilots.create({
                workflow_id: undefined,
                img_url: undefined,
                display_name: undefined,
                mode: undefined,
                code_theme: undefined,
                colors: undefined,
                fab: undefined,
                loading_text: undefined,
                message_placeholder: undefined,
                initial_activity: undefined,
                allowed_origins: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                copilot_config: {
                    workflow_id: "workflow_id",
                    img_url: "img_url",
                    display_name: "display_name",
                    mode: "light",
                    code_theme: "light",
                    colors: { key: "value" },
                    loading_text: "loading_text",
                    message_placeholder: "message_placeholder",
                    allowed_origins: "allowed_origins",
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                copilot_id: "copilot_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .get("/v2/copilots/copilot_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.get("copilot_id");
        expect(response).toEqual({
            data: {
                copilot_config: {
                    workflow_id: "workflow_id",
                    img_url: "img_url",
                    display_name: "display_name",
                    mode: "light",
                    code_theme: "light",
                    colors: {
                        key: "value",
                    },
                    loading_text: "loading_text",
                    message_placeholder: "message_placeholder",
                    allowed_origins: "allowed_origins",
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                copilot_id: "copilot_id",
                is_draft: true,
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/copilots/copilot_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.copilots.get("copilot_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                copilot_config: {
                    workflow_id: "workflow_id",
                    img_url: "img_url",
                    display_name: "display_name",
                    mode: "light",
                    code_theme: "light",
                    colors: { key: "value" },
                    loading_text: "loading_text",
                    message_placeholder: "message_placeholder",
                    allowed_origins: "allowed_origins",
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                copilot_id: "copilot_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .put("/v2/copilots/copilot_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.update("copilot_id", {});
        expect(response).toEqual({
            data: {
                copilot_config: {
                    workflow_id: "workflow_id",
                    img_url: "img_url",
                    display_name: "display_name",
                    mode: "light",
                    code_theme: "light",
                    colors: {
                        key: "value",
                    },
                    loading_text: "loading_text",
                    message_placeholder: "message_placeholder",
                    allowed_origins: "allowed_origins",
                },
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                copilot_id: "copilot_id",
                is_draft: true,
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflow_id: undefined,
            img_url: undefined,
            display_name: undefined,
            mode: undefined,
            code_theme: undefined,
            colors: undefined,
            fab: undefined,
            loading_text: undefined,
            message_placeholder: undefined,
            initial_activity: undefined,
            allowed_origins: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/copilots/copilot_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.copilots.update("copilot_id", {
                workflow_id: undefined,
                img_url: undefined,
                display_name: undefined,
                mode: undefined,
                code_theme: undefined,
                colors: undefined,
                fab: undefined,
                loading_text: undefined,
                message_placeholder: undefined,
                initial_activity: undefined,
                allowed_origins: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .delete("/v2/copilots/copilot_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.copilots.delete("copilot_id");
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/copilots/copilot_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.copilots.delete("copilot_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
