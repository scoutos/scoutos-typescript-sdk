// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Environments", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    environment_id: "environment_id",
                    environment_config: { name: "name", description: "description" },
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: { key: "value" },
                        },
                    },
                    last_updated_at: "2024-01-15T09:30:00Z",
                    last_updated_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: { key: "value" },
                        },
                    },
                    deployments: [
                        {
                            deployment_id: "deployment_id",
                            environment_id: "environment_id",
                            deployment_config: { revision_id: undefined, revision_lookup: "latest" },
                            created_at: "2024-01-15T09:30:00Z",
                            created_by: {
                                type: "user",
                                details: {
                                    user_id: "user_id",
                                    org_id: "org_id",
                                    scout_organization_id: "scout_organization_id",
                                    email: { key: "value" },
                                },
                            },
                        },
                    ],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v2/workflows/workflow_id/environments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.environments.list("workflow_id");
        expect(response).toEqual({
            data: [
                {
                    environment_id: "environment_id",
                    environment_config: {
                        name: "name",
                        description: "description",
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: {
                                key: "value",
                            },
                        },
                    },
                    last_updated_at: "2024-01-15T09:30:00Z",
                    last_updated_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: {
                                key: "value",
                            },
                        },
                    },
                    deployments: [
                        {
                            deployment_id: "deployment_id",
                            environment_id: "environment_id",
                            deployment_config: {
                                revision_id: undefined,
                                revision_lookup: "latest",
                            },
                            created_at: "2024-01-15T09:30:00Z",
                            created_by: {
                                type: "user",
                                details: {
                                    user_id: "user_id",
                                    org_id: "org_id",
                                    scout_organization_id: "scout_organization_id",
                                    email: {
                                        key: "value",
                                    },
                                },
                            },
                        },
                    ],
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/workflows/workflow_id/environments")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.environments.list("workflow_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            description: "description",
            deployments: [{ revision_lookup: "latest" }],
        };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .put("/v2/workflows/workflow_id/environments/environment_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.environments.update("workflow_id", "environment_id", {
            name: "name",
            description: "description",
            deployments: [
                {
                    revision_lookup: "latest",
                },
            ],
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            description: "description",
            deployments: [
                { revision_id: undefined, revision_lookup: "latest", traffic: undefined },
                { revision_id: undefined, revision_lookup: "latest", traffic: undefined },
            ],
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/workflows/workflow_id/environments/environment_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.environments.update("workflow_id", "environment_id", {
                name: "name",
                description: "description",
                deployments: [
                    {
                        revision_id: undefined,
                        revision_lookup: "latest",
                        traffic: undefined,
                    },
                    {
                        revision_id: undefined,
                        revision_lookup: "latest",
                        traffic: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
