// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Integrations", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                service_id: "service_id",
                icon_url: "icon_url",
                has_permission: true,
                oauth_token_id: "oauth_token_id",
            },
        ];
        server
            .mockEndpoint()
            .get("/v2/integrations/service")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.integrations.list("service", {
            fetch_icons: true,
        });
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                service_id: "service_id",
                icon_url: "icon_url",
                has_permission: true,
                oauth_token_id: "oauth_token_id",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/integrations/service")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.integrations.list("service");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("list_channels (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [{ id: "id", name: "name", is_private: true, num_members: 1 }];
        server
            .mockEndpoint()
            .get("/v2/integrations/slack/team_id/channels")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.integrations.listChannels("team_id");
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                is_private: true,
                num_members: 1,
            },
        ]);
    });

    test("list_channels (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/integrations/slack/team_id/channels")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.integrations.listChannels("team_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
