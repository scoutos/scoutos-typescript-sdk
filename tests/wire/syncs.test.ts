// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Syncs", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    sync_config: {
                        source_settings: { source_archetype_id: "com.google.drive" },
                        destination: {
                            destination_type: "collections.v2",
                            collection_id: "collection_id",
                            table_id: "table_id",
                        },
                        mapping: {},
                        schedule: undefined,
                    },
                    sync_id: "sync_id",
                    trigger_id: "trigger_id",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: { type: "user", details: undefined },
                    last_updated_by: { type: "user", details: undefined },
                },
            ],
        };
        server.mockEndpoint().get("/v2/syncs").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.syncs.list();
        expect(response).toEqual({
            data: [
                {
                    sync_config: {
                        source_settings: {
                            source_archetype_id: "com.google.drive",
                        },
                        destination: {
                            destination_type: "collections.v2",
                            collection_id: "collection_id",
                            table_id: "table_id",
                        },
                        mapping: {},
                        schedule: undefined,
                    },
                    sync_id: "sync_id",
                    trigger_id: "trigger_id",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: undefined,
                    },
                    last_updated_by: {
                        type: "user",
                        details: undefined,
                    },
                },
            ],
        });
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sync_config: {
                source_settings: { source_archetype_id: "com.google.drive" },
                destination: {
                    destination_type: "collections.v2",
                    collection_id: "collection_id",
                    table_id: "table_id",
                },
                mapping: {},
            },
        };
        const rawResponseBody = {
            data: {
                sync_config: {
                    source_settings: { source_archetype_id: "com.google.drive" },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {},
                    schedule: { frequency: "frequency", enabled: true },
                },
                sync_id: "sync_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v2/syncs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.syncs.create({
            sync_config: {
                source_settings: {
                    source_archetype_id: "com.google.drive",
                },
                destination: {
                    destination_type: "collections.v2",
                    collection_id: "collection_id",
                    table_id: "table_id",
                },
                mapping: {},
            },
        });
        expect(response).toEqual({
            data: {
                sync_config: {
                    source_settings: {
                        source_archetype_id: "com.google.drive",
                    },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {},
                    schedule: {
                        frequency: "frequency",
                        enabled: true,
                    },
                },
                sync_id: "sync_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sync_config: {
                source_settings: { source_archetype_id: "com.google.drive" },
                destination: {
                    destination_type: "collections.v2",
                    collection_id: "collection_id",
                    table_id: "table_id",
                },
                mapping: { fields: undefined },
                schedule: undefined,
            },
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/syncs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.syncs.create({
                sync_config: {
                    source_settings: {
                        source_archetype_id: "com.google.drive",
                    },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {
                        fields: undefined,
                    },
                    schedule: undefined,
                },
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                sync_config: {
                    source_settings: { source_archetype_id: "com.google.drive" },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {},
                    schedule: { frequency: "frequency", enabled: true },
                },
                sync_id: "sync_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
            },
        };
        server.mockEndpoint().get("/v2/syncs/sync_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.syncs.get("sync_id");
        expect(response).toEqual({
            data: {
                sync_config: {
                    source_settings: {
                        source_archetype_id: "com.google.drive",
                    },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {},
                    schedule: {
                        frequency: "frequency",
                        enabled: true,
                    },
                },
                sync_id: "sync_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v2/syncs/sync_id").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.syncs.get("sync_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sync_config: {
                source_settings: { source_archetype_id: "com.google.drive" },
                destination: {
                    destination_type: "collections.v2",
                    collection_id: "collection_id",
                    table_id: "table_id",
                },
                mapping: {},
            },
        };
        const rawResponseBody = {
            data: {
                sync_config: {
                    source_settings: { source_archetype_id: "com.google.drive" },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {},
                    schedule: { frequency: "frequency", enabled: true },
                },
                sync_id: "sync_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
            },
        };
        server
            .mockEndpoint()
            .put("/v2/syncs/sync_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.syncs.update("sync_id", {
            sync_config: {
                source_settings: {
                    source_archetype_id: "com.google.drive",
                },
                destination: {
                    destination_type: "collections.v2",
                    collection_id: "collection_id",
                    table_id: "table_id",
                },
                mapping: {},
            },
        });
        expect(response).toEqual({
            data: {
                sync_config: {
                    source_settings: {
                        source_archetype_id: "com.google.drive",
                    },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {},
                    schedule: {
                        frequency: "frequency",
                        enabled: true,
                    },
                },
                sync_id: "sync_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sync_config: {
                source_settings: { source_archetype_id: "com.google.drive" },
                destination: {
                    destination_type: "collections.v2",
                    collection_id: "collection_id",
                    table_id: "table_id",
                },
                mapping: { fields: undefined },
                schedule: undefined,
            },
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/syncs/sync_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.syncs.update("sync_id", {
                sync_config: {
                    source_settings: {
                        source_archetype_id: "com.google.drive",
                    },
                    destination: {
                        destination_type: "collections.v2",
                        collection_id: "collection_id",
                        table_id: "table_id",
                    },
                    mapping: {
                        fields: undefined,
                    },
                    schedule: undefined,
                },
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status_code: 1 };
        server
            .mockEndpoint()
            .delete("/v2/syncs/sync_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.syncs.delete("sync_id");
        expect(response).toEqual({
            detail: "detail",
            status_code: 1,
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/syncs/sync_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.syncs.delete("sync_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("execute (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v2/syncs/sync_id/execute")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.syncs.execute("sync_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("execute (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/syncs/sync_id/execute")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.syncs.execute("sync_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
