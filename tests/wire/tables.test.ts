// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Tables", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    table_config: {
                        table_img_url: undefined,
                        table_description: undefined,
                        schema: undefined,
                        icon_emoji: undefined,
                        icon_asset_url: undefined,
                        icon_fill: undefined,
                        singular_name: undefined,
                        plural_name: undefined,
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_by: { type: "user", details: undefined },
                    last_updated_by: { type: "user", details: undefined },
                    revision_id: "revision_id",
                    table_id: "table_id",
                    index_id: "index_id",
                    collection_id: "collection_id",
                    documents_uploading: true,
                    migrated: true,
                    agent_table_id: "agent_table_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/tables")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.list("collection_id");
        expect(response).toEqual({
            data: [
                {
                    table_config: {
                        table_img_url: undefined,
                        table_description: undefined,
                        schema: undefined,
                        icon_emoji: undefined,
                        icon_asset_url: undefined,
                        icon_fill: undefined,
                        singular_name: undefined,
                        plural_name: undefined,
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: undefined,
                    },
                    last_updated_by: {
                        type: "user",
                        details: undefined,
                    },
                    revision_id: "revision_id",
                    table_id: "table_id",
                    index_id: "index_id",
                    collection_id: "collection_id",
                    documents_uploading: true,
                    migrated: true,
                    agent_table_id: "agent_table_id",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/tables")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.list("collection_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                table_config: {
                    table_display_name: "table_display_name",
                    table_img_url: "table_img_url",
                    table_description: "table_description",
                    schema: [
                        {
                            column_display_name: undefined,
                            column_type: "checkbox",
                            automation_config: {
                                mode: "typescript",
                                button_text: undefined,
                                executing_text: undefined,
                                function: "function",
                            },
                        },
                    ],
                    icon_emoji: "icon_emoji",
                    icon_asset_url: "icon_asset_url",
                    icon_fill: "icon_fill",
                    singular_name: "singular_name",
                    plural_name: "plural_name",
                },
                created_at: "2024-01-15T09:30:00Z",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                table_id: "table_id",
                index_id: "index_id",
                collection_id: "collection_id",
                documents_uploading: true,
                migrated: true,
                agent_table_id: "agent_table_id",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/collections/collection_id/tables")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.create("collection_id");
        expect(response).toEqual({
            data: {
                table_config: {
                    table_display_name: "table_display_name",
                    table_img_url: "table_img_url",
                    table_description: "table_description",
                    schema: [
                        {
                            column_display_name: undefined,
                            column_type: "checkbox",
                            automation_config: {
                                mode: "typescript",
                                button_text: undefined,
                                executing_text: undefined,
                                function: "function",
                            },
                        },
                    ],
                    icon_emoji: "icon_emoji",
                    icon_asset_url: "icon_asset_url",
                    icon_fill: "icon_fill",
                    singular_name: "singular_name",
                    plural_name: "plural_name",
                },
                created_at: "2024-01-15T09:30:00Z",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                table_id: "table_id",
                index_id: "index_id",
                collection_id: "collection_id",
                documents_uploading: true,
                migrated: true,
                agent_table_id: "agent_table_id",
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            table_display_name: undefined,
            table_img_url: undefined,
            table_description: undefined,
            schema: undefined,
            icon_emoji: undefined,
            icon_asset_url: undefined,
            icon_fill: undefined,
            singular_name: undefined,
            plural_name: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/collections/collection_id/tables")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.create("collection_id", {
                table_display_name: undefined,
                table_img_url: undefined,
                table_description: undefined,
                schema: undefined,
                icon_emoji: undefined,
                icon_asset_url: undefined,
                icon_fill: undefined,
                singular_name: undefined,
                plural_name: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                table_config: {
                    table_display_name: "table_display_name",
                    table_img_url: "table_img_url",
                    table_description: "table_description",
                    schema: [
                        {
                            column_display_name: undefined,
                            column_type: "checkbox",
                            automation_config: {
                                mode: "typescript",
                                button_text: undefined,
                                executing_text: undefined,
                                function: "function",
                            },
                        },
                    ],
                    icon_emoji: "icon_emoji",
                    icon_asset_url: "icon_asset_url",
                    icon_fill: "icon_fill",
                    singular_name: "singular_name",
                    plural_name: "plural_name",
                },
                created_at: "2024-01-15T09:30:00Z",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                table_id: "table_id",
                index_id: "index_id",
                collection_id: "collection_id",
                documents_uploading: true,
                migrated: true,
                agent_table_id: "agent_table_id",
            },
        };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/tables/table_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.get("collection_id", "table_id");
        expect(response).toEqual({
            data: {
                table_config: {
                    table_display_name: "table_display_name",
                    table_img_url: "table_img_url",
                    table_description: "table_description",
                    schema: [
                        {
                            column_display_name: undefined,
                            column_type: "checkbox",
                            automation_config: {
                                mode: "typescript",
                                button_text: undefined,
                                executing_text: undefined,
                                function: "function",
                            },
                        },
                    ],
                    icon_emoji: "icon_emoji",
                    icon_asset_url: "icon_asset_url",
                    icon_fill: "icon_fill",
                    singular_name: "singular_name",
                    plural_name: "plural_name",
                },
                created_at: "2024-01-15T09:30:00Z",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                table_id: "table_id",
                index_id: "index_id",
                collection_id: "collection_id",
                documents_uploading: true,
                migrated: true,
                agent_table_id: "agent_table_id",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/tables/table_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.get("collection_id", "table_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                table_config: {
                    table_display_name: "table_display_name",
                    table_img_url: "table_img_url",
                    table_description: "table_description",
                    schema: [
                        {
                            column_display_name: undefined,
                            column_type: "checkbox",
                            automation_config: {
                                mode: "typescript",
                                button_text: undefined,
                                executing_text: undefined,
                                function: "function",
                            },
                        },
                    ],
                    icon_emoji: "icon_emoji",
                    icon_asset_url: "icon_asset_url",
                    icon_fill: "icon_fill",
                    singular_name: "singular_name",
                    plural_name: "plural_name",
                },
                created_at: "2024-01-15T09:30:00Z",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                table_id: "table_id",
                index_id: "index_id",
                collection_id: "collection_id",
                documents_uploading: true,
                migrated: true,
                agent_table_id: "agent_table_id",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id/tables/table_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.update("collection_id", "table_id");
        expect(response).toEqual({
            data: {
                table_config: {
                    table_display_name: "table_display_name",
                    table_img_url: "table_img_url",
                    table_description: "table_description",
                    schema: [
                        {
                            column_display_name: undefined,
                            column_type: "checkbox",
                            automation_config: {
                                mode: "typescript",
                                button_text: undefined,
                                executing_text: undefined,
                                function: "function",
                            },
                        },
                    ],
                    icon_emoji: "icon_emoji",
                    icon_asset_url: "icon_asset_url",
                    icon_fill: "icon_fill",
                    singular_name: "singular_name",
                    plural_name: "plural_name",
                },
                created_at: "2024-01-15T09:30:00Z",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                table_id: "table_id",
                index_id: "index_id",
                collection_id: "collection_id",
                documents_uploading: true,
                migrated: true,
                agent_table_id: "agent_table_id",
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            table_display_name: undefined,
            table_img_url: undefined,
            table_description: undefined,
            schema: undefined,
            icon_emoji: undefined,
            icon_asset_url: undefined,
            icon_fill: undefined,
            singular_name: undefined,
            plural_name: undefined,
            index_id: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/collections/collection_id/tables/table_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.update("collection_id", "table_id", {
                table_display_name: undefined,
                table_img_url: undefined,
                table_description: undefined,
                schema: undefined,
                icon_emoji: undefined,
                icon_asset_url: undefined,
                icon_fill: undefined,
                singular_name: undefined,
                plural_name: undefined,
                index_id: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id/tables/table_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.delete("collection_id", "table_id");
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/collections/collection_id/tables/table_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.delete("collection_id", "table_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get_schema (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    column_id: "column_id",
                    column_display_name: "column_display_name",
                    column_type: "checkbox",
                    data_type: "boolean",
                    hidden: true,
                    automation_config: {
                        mode: "typescript",
                        button_text: undefined,
                        executing_text: undefined,
                        function: "function",
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/tables/table_id/schema")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.getSchema("collection_id", "table_id");
        expect(response).toEqual({
            data: [
                {
                    column_id: "column_id",
                    column_display_name: "column_display_name",
                    column_type: "checkbox",
                    data_type: "boolean",
                    hidden: true,
                    automation_config: {
                        mode: "typescript",
                        button_text: undefined,
                        executing_text: undefined,
                        function: "function",
                    },
                },
            ],
        });
    });

    test("get_schema (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/collections/collection_id/tables/table_id/schema")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.getSchema("collection_id", "table_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("sync (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = [{ key: "value" }];
        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .post("/v2/collections/collection_id/tables/table_id/sync")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tables.sync("collection_id", "table_id", [
            {
                key: "value",
            },
        ]);
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("sync (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = [{ string: { key: "value" } }, { string: { key: "value" } }];
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/collections/collection_id/tables/table_id/sync")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tables.sync("collection_id", "table_id", [
                {
                    string: {
                        key: "value",
                    },
                },
                {
                    string: {
                        key: "value",
                    },
                },
            ]);
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
