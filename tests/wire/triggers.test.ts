/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Triggers", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    trigger_config: {
                        trigger_display_name: undefined,
                        trigger_type: "cron",
                        action: { action_type: "source.sync", sync_id: "sync_id" },
                        cron_expression: "cron_expression",
                    },
                    organization_id: "organization_id",
                    trigger_id: "trigger_id",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    revision_id: "revision_id",
                },
            ],
        };
        server.mockEndpoint().get("/v2/triggers").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.triggers.list({
            action_type: "workflow.execute",
            workflow_id: "workflow_id",
        });
        expect(response).toEqual({
            data: [
                {
                    trigger_config: {
                        trigger_display_name: undefined,
                        trigger_type: "cron",
                        action: {
                            action_type: "source.sync",
                            sync_id: "sync_id",
                        },
                        cron_expression: "cron_expression",
                    },
                    organization_id: "organization_id",
                    trigger_id: "trigger_id",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    revision_id: "revision_id",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v2/triggers").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.triggers.list();
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { action: { action_type: "source.sync", sync_id: "sync_id" } };
        const rawResponseBody = {
            data: {
                trigger_config: {
                    trigger_display_name: "trigger_display_name",
                    trigger_type: "cron",
                    action: { action_type: "source.sync", sync_id: "sync_id" },
                    status: "active",
                    cron_expression: "cron_expression",
                    timezone: "timezone",
                    trigger_inputs: { key: "value" },
                },
                organization_id: "organization_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                revision_id: "revision_id",
            },
        };
        server
            .mockEndpoint()
            .post("/v2/triggers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.create({
            action: {
                action_type: "source.sync",
                sync_id: "sync_id",
            },
        });
        expect(response).toEqual({
            data: {
                trigger_config: {
                    trigger_display_name: "trigger_display_name",
                    trigger_type: "cron",
                    action: {
                        action_type: "source.sync",
                        sync_id: "sync_id",
                    },
                    status: "active",
                    cron_expression: "cron_expression",
                    timezone: "timezone",
                    trigger_inputs: {
                        key: "value",
                    },
                },
                organization_id: "organization_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                revision_id: "revision_id",
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            trigger_display_name: undefined,
            trigger_type: undefined,
            action: { action_type: "source.sync", sync_id: "sync_id" },
            status: undefined,
            run_conditions: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/triggers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.triggers.create({
                trigger_display_name: undefined,
                trigger_type: undefined,
                action: {
                    action_type: "source.sync",
                    sync_id: "sync_id",
                },
                status: undefined,
                run_conditions: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { action: { action_type: "source.sync", sync_id: "sync_id" } };
        const rawResponseBody = {
            data: {
                trigger_config: {
                    trigger_display_name: "trigger_display_name",
                    trigger_type: "cron",
                    action: { action_type: "source.sync", sync_id: "sync_id" },
                    status: "active",
                    cron_expression: "cron_expression",
                    timezone: "timezone",
                    trigger_inputs: { key: "value" },
                },
                organization_id: "organization_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                revision_id: "revision_id",
            },
        };
        server
            .mockEndpoint()
            .put("/v2/triggers/trigger_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.update("trigger_id", {
            action: {
                action_type: "source.sync",
                sync_id: "sync_id",
            },
        });
        expect(response).toEqual({
            data: {
                trigger_config: {
                    trigger_display_name: "trigger_display_name",
                    trigger_type: "cron",
                    action: {
                        action_type: "source.sync",
                        sync_id: "sync_id",
                    },
                    status: "active",
                    cron_expression: "cron_expression",
                    timezone: "timezone",
                    trigger_inputs: {
                        key: "value",
                    },
                },
                organization_id: "organization_id",
                trigger_id: "trigger_id",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                revision_id: "revision_id",
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            trigger_display_name: undefined,
            trigger_type: undefined,
            action: { action_type: "source.sync", sync_id: "sync_id" },
            status: undefined,
            run_conditions: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/triggers/trigger_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.triggers.update("trigger_id", {
                trigger_display_name: undefined,
                trigger_type: undefined,
                action: {
                    action_type: "source.sync",
                    sync_id: "sync_id",
                },
                status: undefined,
                run_conditions: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .delete("/v2/triggers/trigger_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.delete("trigger_id");
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/triggers/trigger_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.triggers.delete("trigger_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("execute_slack", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { challenge: "challenge", type: "type" };
        server
            .mockEndpoint()
            .post("/v2/triggers/slack/execute")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.executeSlack();
        expect(response).toEqual({
            challenge: "challenge",
            type: "type",
        });
    });

    test("execute_cron", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .post("/v2/triggers/cron/execute")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.executeCron();
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("update_cron_auth_headers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total_jobs_found: 1,
            jobs_needing_update: 1,
            total_jobs_updated: 1,
            updated_jobs: [{ key: "value" }],
            errors: [{ key: "value" }],
        };
        server
            .mockEndpoint()
            .post("/v2/triggers/cron/update-auth-headers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.updateCronAuthHeaders({
            dry_run: true,
            test_org_id: "test_org_id",
        });
        expect(response).toEqual({
            total_jobs_found: 1,
            jobs_needing_update: 1,
            total_jobs_updated: 1,
            updated_jobs: [
                {
                    key: "value",
                },
            ],
            errors: [
                {
                    key: "value",
                },
            ],
        });
    });

    test("update_cron_auth_headers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/triggers/cron/update-auth-headers")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.triggers.updateCronAuthHeaders();
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
