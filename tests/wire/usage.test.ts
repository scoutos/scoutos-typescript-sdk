/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Usage", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                usage: [
                    {
                        organization_id: undefined,
                        workflow_run_type: undefined,
                        block_archetype_id: undefined,
                        execution_date: undefined,
                        total_cost: 1.1,
                        total_execution_duration_ms: undefined,
                        display_name: undefined,
                    },
                ],
                total_cost: 1.1,
            },
        };
        server.mockEndpoint().get("/v2/usage").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.usage.get({
            start_date: "start_date",
            end_date: "end_date",
        });
        expect(response).toEqual({
            data: {
                usage: [
                    {
                        organization_id: undefined,
                        workflow_run_type: undefined,
                        block_archetype_id: undefined,
                        execution_date: undefined,
                        total_cost: 1.1,
                        total_execution_duration_ms: undefined,
                        display_name: undefined,
                    },
                ],
                total_cost: 1.1,
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v2/usage").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.usage.get();
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
