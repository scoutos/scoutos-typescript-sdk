// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ScoutClient } from "../../src/Client";
import * as Scout from "../../src/api/index";

describe("Workflows", () => {
    test("createRevision (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [{ id: "id", bgColor: "bgColor" }],
                    placeholders: [{ block_id: "block_id", type: "triggerPlaceholder" }],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .post("/v2/workflows/revisions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.createRevision({
            workflow_id: "workflow_id",
            workflow_key: "workflow_key",
            body: {},
        });
        expect(response).toEqual({
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [
                        {
                            id: "id",
                            bgColor: "bgColor",
                        },
                    ],
                    placeholders: [
                        {
                            block_id: "block_id",
                            type: "triggerPlaceholder",
                        },
                    ],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        });
    });

    test("createRevision (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflow_display_name: undefined,
            workflow_schema_version: undefined,
            workflow_img_url: undefined,
            workflow_description: undefined,
            blocks: undefined,
            notes: undefined,
            placeholders: undefined,
            tags: undefined,
            is_tool: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/workflows/revisions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.createRevision({
                body: {
                    workflow_display_name: undefined,
                    workflow_schema_version: undefined,
                    workflow_img_url: undefined,
                    workflow_description: undefined,
                    blocks: undefined,
                    notes: undefined,
                    placeholders: undefined,
                    tags: undefined,
                    is_tool: undefined,
                },
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    workflow_config: { workflow_img_url: undefined, workflow_description: undefined },
                    workflow_key: "workflow_key",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: { key: "value" },
                        },
                    },
                    last_updated_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: { key: "value" },
                        },
                    },
                    revision_id: "revision_id",
                    workflow_id: "workflow_id",
                    is_draft: true,
                },
            ],
            next_cursor: "2024-01-15T09:30:00Z",
            has_more: true,
        };
        server.mockEndpoint().get("/v2/workflows").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.workflows.list({
            sort: "sort",
            direction: "direction",
            start_at: "start_at",
            limit: 1,
            query: "query",
            tags: "tags",
        });
        expect(response).toEqual({
            data: [
                {
                    workflow_config: {
                        workflow_img_url: undefined,
                        workflow_description: undefined,
                    },
                    workflow_key: "workflow_key",
                    last_updated_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    created_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: {
                                key: "value",
                            },
                        },
                    },
                    last_updated_by: {
                        type: "user",
                        details: {
                            user_id: "user_id",
                            org_id: "org_id",
                            scout_organization_id: "scout_organization_id",
                            email: {
                                key: "value",
                            },
                        },
                    },
                    revision_id: "revision_id",
                    workflow_id: "workflow_id",
                    is_draft: true,
                },
            ],
            next_cursor: "2024-01-15T09:30:00Z",
            has_more: true,
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v2/workflows").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.workflows.list();
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [{ id: "id", bgColor: "bgColor" }],
                    placeholders: [{ block_id: "block_id", type: "triggerPlaceholder" }],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .post("/v2/workflows")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.create({
            workflow_key: "workflow_key",
            body: {},
        });
        expect(response).toEqual({
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [
                        {
                            id: "id",
                            bgColor: "bgColor",
                        },
                    ],
                    placeholders: [
                        {
                            block_id: "block_id",
                            type: "triggerPlaceholder",
                        },
                    ],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflow_display_name: undefined,
            workflow_schema_version: undefined,
            workflow_img_url: undefined,
            workflow_description: undefined,
            blocks: undefined,
            notes: undefined,
            placeholders: undefined,
            tags: undefined,
            is_tool: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/workflows")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.create({
                body: {
                    workflow_display_name: undefined,
                    workflow_schema_version: undefined,
                    workflow_img_url: undefined,
                    workflow_description: undefined,
                    blocks: undefined,
                    notes: undefined,
                    placeholders: undefined,
                    tags: undefined,
                    is_tool: undefined,
                },
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [{ id: "id", bgColor: "bgColor" }],
                    placeholders: [{ block_id: "block_id", type: "triggerPlaceholder" }],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .get("/v2/workflows/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.get("workflow_id");
        expect(response).toEqual({
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [
                        {
                            id: "id",
                            bgColor: "bgColor",
                        },
                    ],
                    placeholders: [
                        {
                            block_id: "block_id",
                            type: "triggerPlaceholder",
                        },
                    ],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v2/workflows/workflow_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.get("workflow_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [{ id: "id", bgColor: "bgColor" }],
                    placeholders: [{ block_id: "block_id", type: "triggerPlaceholder" }],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: { key: "value" },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        };
        server
            .mockEndpoint()
            .put("/v2/workflows/workflow_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.update("workflow_id", {});
        expect(response).toEqual({
            data: {
                workflow_config: {
                    workflow_display_name: "workflow_display_name",
                    workflow_schema_version: "workflow_schema_version",
                    workflow_img_url: "workflow_img_url",
                    workflow_description: "workflow_description",
                    blocks: [
                        {
                            block_archetype_id: "block_archetype_id",
                            block_display_name: "block_display_name",
                            block_id: "block_id",
                            trigger_config: undefined,
                        },
                    ],
                    notes: [
                        {
                            id: "id",
                            bgColor: "bgColor",
                        },
                    ],
                    placeholders: [
                        {
                            block_id: "block_id",
                            type: "triggerPlaceholder",
                        },
                    ],
                    tags: ["tags"],
                    is_tool: true,
                },
                workflow_key: "workflow_key",
                last_updated_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                created_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                last_updated_by: {
                    type: "user",
                    details: {
                        user_id: "user_id",
                        org_id: "org_id",
                        scout_organization_id: "scout_organization_id",
                        email: {
                            key: "value",
                        },
                    },
                },
                revision_id: "revision_id",
                workflow_id: "workflow_id",
                is_draft: true,
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflow_display_name: undefined,
            workflow_schema_version: undefined,
            workflow_img_url: undefined,
            workflow_description: undefined,
            blocks: undefined,
            notes: undefined,
            placeholders: undefined,
            tags: undefined,
            is_tool: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .put("/v2/workflows/workflow_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.update("workflow_id", {
                workflow_display_name: undefined,
                workflow_schema_version: undefined,
                workflow_img_url: undefined,
                workflow_description: undefined,
                blocks: undefined,
                notes: undefined,
                placeholders: undefined,
                tags: undefined,
                is_tool: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail" };
        server
            .mockEndpoint()
            .delete("/v2/workflows/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.delete("workflow_id");
        expect(response).toEqual({
            detail: "detail",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v2/workflows/workflow_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.delete("workflow_id");
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("run (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { streaming: false };
        const rawResponseBody = {
            run: {
                stop_reason: "workflow_run_completed",
                state: { key: [] },
                errors: ["errors"],
                session_id: "session_id",
                workflow_run_id: "workflow_run_id",
            },
            workflow_id: "workflow_id",
            output_block_id: "output_block_id",
        };
        server
            .mockEndpoint()
            .post("/v2/workflows/workflow_id/execute")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.run("workflow_id", {
            environment: "environment",
            revision_id: "revision_id",
            session_id: "session_id",
        });
        expect(response).toEqual({
            run: {
                stop_reason: "workflow_run_completed",
                state: {
                    key: [],
                },
                errors: ["errors"],
                session_id: "session_id",
                workflow_run_id: "workflow_run_id",
            },
            workflow_id: "workflow_id",
            output_block_id: "output_block_id",
        });
    });

    test("run (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { inputs: undefined, streaming: false };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/workflows/workflow_id/execute")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.run("workflow_id", {
                inputs: undefined,
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });

    test("runWithConfig (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { workflow_config: {} };
        const rawResponseBody = {
            organization_id: "organization_id",
            id: "id",
            correlation_id: "correlation_id",
            name: "workflow_run_started",
            environment: "development",
            timestamp: "timestamp",
            data: {
                actor: { id: "id", type: "external" },
                workflow_id: "workflow_id",
                workflow_run_id: "workflow_run_id",
                inputs: { key: "value" },
                session_id: "session_id",
                state: { key: "value" },
                workflow_config: { key: "value" },
                price: 1.1,
            },
            price: "price",
            event_type: "event_type",
            version: "version",
        };
        server
            .mockEndpoint()
            .post("/v2/workflows/execute")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workflows.runWithConfig({
            environment: "environment",
            revision_id: "revision_id",
            session_id: "session_id",
            workflow_config: {},
        });
        expect(response).toEqual({
            organization_id: "organization_id",
            id: "id",
            correlation_id: "correlation_id",
            name: "workflow_run_started",
            environment: "development",
            timestamp: "timestamp",
            data: {
                actor: {
                    id: "id",
                    type: "external",
                },
                workflow_id: "workflow_id",
                workflow_run_id: "workflow_run_id",
                inputs: {
                    key: "value",
                },
                session_id: "session_id",
                state: {
                    key: "value",
                },
                workflow_config: {
                    key: "value",
                },
                price: 1.1,
            },
            price: "price",
            event_type: "event_type",
            version: "version",
        });
    });

    test("runWithConfig (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ScoutClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflow_key: undefined,
            inputs: undefined,
            streaming: undefined,
            workflow_config: {
                workflow_display_name: undefined,
                workflow_schema_version: undefined,
                workflow_img_url: undefined,
                workflow_description: undefined,
                blocks: undefined,
                notes: undefined,
                placeholders: undefined,
                tags: undefined,
                is_tool: undefined,
            },
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v2/workflows/execute")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workflows.runWithConfig({
                workflow_key: undefined,
                inputs: undefined,
                streaming: undefined,
                workflow_config: {
                    workflow_display_name: undefined,
                    workflow_schema_version: undefined,
                    workflow_img_url: undefined,
                    workflow_description: undefined,
                    blocks: undefined,
                    notes: undefined,
                    placeholders: undefined,
                    tags: undefined,
                    is_tool: undefined,
                },
            });
        }).rejects.toThrow(Scout.UnprocessableEntityError);
    });
});
